name: PR Validation

on:
  pull_request:
    branches:
      - master
      - main

jobs:
  validate:
    runs-on: windows-latest # ubuntu-latest  # Uses an Ubuntu runtime environment

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3  # Downloads the source code

      - name: Extract Solution Name and Version
        id:   "extract_info"
        run: |
          $xml = [xml](Get-Content ./src/solution/src/Other/solution.xml)
          $solution_version = $xml.ImportExportXml.SolutionManifest.Version
          $solution_name    = "$($xml.ImportExportXml.SolutionManifest.LocalizedNames.LocalizedName.description)".replace(" ", "_")

          echo "Solution: $solution_name"
          echo "Version:  $solution_version"
          echo "solution_name=$solution_name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "solution_version=$solution_version" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: "Check Version"
        run: |
          echo "Output [${{steps.extract_info.outputs.solution_name}} v${{steps.extract_info.outputs.solution_version}}]"

      - name: Set up Node.js
        uses: actions/setup-node@v4  # Sets up the Node.js environment

      - name: Install Dependencies
        working-directory: ./src  # Sets the working directory to the control directory
        run: npm install  # Installs project dependencies for the PCF control

      - name: Build PCF Control
        working-directory: ./src  # Sets the working directory to the control directory
        run: npm run build  # Executes the build process for the PCF control

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Build and Package PCF Solution
        id:   "build_solution"
        working-directory: ./src/solution  # Sets the working directory to the solution directory
        run: |
          msbuild /t:build /restore
          
          $name     = "${{ steps.extract_info.outputs.solution_name }}_managed_${{ steps.extract_info.outputs.solution_version }}.zip".replace(" ", "_")
          $artifact = "./src/solution/bin/Debug/$name"
          echo "Artifact:  $artifact"
          mv ./bin/Debug/solution.zip "./bin/Debug/$name"

          echo "artifact_name=$name" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
          echo "artifact=$artifact" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Archive Solution
        uses: actions/upload-artifact@v4
        with:
          name: Artifacts
          path: ${{ steps.build_solution.outputs.artifact }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.build_solution.outputs.artifact }}
          asset_name: ${{ steps.build_solution.outputs.artifact_name }}
          asset_content_type: application/zip